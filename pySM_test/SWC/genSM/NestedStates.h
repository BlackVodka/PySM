/******************************************************************************
 *                                                                            *
 * Generated by pySM - The python state machine code generator                *
 *                                                                            *
 *****************************************************************************/

/**
 * @file NestedStates.h
 * @author Markus Burger
 * @date 2018-01-28
 * @brief Header for generated state machine nestedStates
 * Hand-written test file
 */
 
#ifndef NESTEDSTATES_H_
#define NESTEDSTATES_H_

/* ========================================================================= */
/* INCLUDES                                                                  */
/* ========================================================================= */
#include "PySm_types.h"


/* ========================================================================= */
/* USER PREPROCESSOR DIRECTIVES                                              */
/* ========================================================================= */


/* ========================================================================= */
/* TYPEDEFS                                                                  */
/* ========================================================================= */
/**
 * @brief Structure defining input signals for state machine
 * nestedStates
*/
typedef struct
{
	pySm_bool trigger_a;
	pySm_bool trigger_b;
	pySm_bool trigger_c;
	pySm_bool trigger_d;
	pySm_bool trigger_e;
	pySm_bool trigger_f;
	pySm_bool trigger_g;
	pySm_bool trigger_h;
	pySm_bool trigger_i;
	pySm_bool trigger_j;
	pySm_bool trigger_k;
	pySm_bool trigger_l;
} nestedStates_inputSignalsType;


/**
 * @brief Structure defining output signals for state machine
 * nestedStates
*/
typedef struct
{
	pySm_bool testOutput;
} nestedStates_outputSignalsType;


/**
 * @brief Enum for exporting current active state of state machine
 * simpleEx
*/
typedef enum
{
	NESTEDSTATES_RESERVED_INVALID_STATE,
	NESTEDSTATES_RESERVED_INACTIVE_STATE,
	NESTEDSTATES_SUP_A,
	NESTEDSTATES_SUP_B,
	NESTEDSTATES_SUP_C,
	NESTEDSTATES_SUP_D,
	NESTEDSTATES_SUP_E,
	NESTEDSTATES_SUP_F,
	NESTEDSTATES_SUP_G,
	NESTEDSTATES_SUB_A,
	NESTEDSTATES_SUB_B,
	NESTEDSTATES_SUB_C,
	NESTEDSTATES_SUB_D,
	NESTEDSTATES_SUB_E,
	NESTEDSTATES_SUB_F,
	NESTEDSTATES_SUB_G,
	NESTEDSTATES_SUB_H,
	NESTEDSTATES_SUB_I,
	NESTEDSTATES_SUB_J,
	NESTEDSTATES_TOTAL_NUMBER_OF_STATES
} nestedStates_activeStateType;


typedef enum
{
	NESTEDSTATES_STATE_INACTIVE,
	NESTEDSTATES_STATE_ACTIVE
} nestedStates_stateStatusType;


typedef enum
{
	NESTEDSTATES_NO_EXIT_REQUESTED,
	NESTEDSTATES_EXIT_REQUESTED
} nestedStates_exitRequestType;


/* ========================================================================= */
/* API DECLARATION                                                           */
/* ========================================================================= */
/**
 * @brief Main function of the state machine
 * simpleEx
*/
pySm_returnType NestedStates_init(void);


/**
 * @brief Main function of the state machine
 * simpleEx
*/
pySm_returnType NestedStates_mainFunction(nestedStates_inputSignalsType*, nestedStates_outputSignalsType*);


/**
 * @brief Main function of the state machine
 * simpleEx
*/
void NestedStates_getActiveState(nestedStates_activeStateType*);


#endif /* SIMPLEEX_H_ */
